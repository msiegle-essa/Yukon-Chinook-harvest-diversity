
    model {
    # priors for SR portion
    lnalpha ~ dunif(0, 3) 
    #beta ~ dunif(0,10)
    beta ~ dnorm(bpmu,bptau)
    beta.prior ~ dnorm(bpmu,bptau) #for plotting and checking
    tau.R ~ dgamma(0.01,0.01)  # white noise process error      
    phi ~ dunif(-0.99, 0.99)   # autocorrelation coefficient                                              
    log.resid.0 ~ dnorm(0, tau.red)  # starting residual for AR1 process
    
    # Ricker SR with AR1 process on log recruitment residuals for years with brood year spawners
    for (y in (A+a.min):nRyrs) {
    log.R[y] ~ dnorm(log.R.mean.2[y], tau.R)  # true state R is lognormally distributed around the prediction given by SR with AR1
    R[y] <- exp(log.R[y])
    log.R.mean.1[y] <- lnalpha + log(S[y-a.max]) - beta * S[y-a.max]
    log.resid.a[y] <- log.R[y] - log.R.mean.1[y]
    }             
    
    log.R.mean.2[A+a.min] <- log.R.mean.1[A+a.min] + phi * log.resid.0
    
    for (y in (A+a.min+1):nRyrs) {
    log.R.mean.2[y] <- log.R.mean.1[y] + phi * log.resid.a[y-1]
    }
    
    #derived quantities
    tau.red <- tau.R * (1 - phi * phi)
    sigma.red <- 1 / sqrt(tau.red)
    sigma.R <- 1 / sqrt(tau.R)
    alpha <- exp(lnalpha)
    log.resid <- log.resid.a[(A+a.min):nRyrs]
    
    # First `a.max` years of recruits, for which there is no spawner link
    mean.log.R0 ~ dnorm(0, 1E-4) 
    mean.R0 <- exp(mean.log.R0)
    tau.R0 ~ dgamma(0.1,0.1)
    sigma.R0 <- 1/sqrt(tau.R0)
    for (y in 1:a.max) {
    log.R[y] ~ dnorm(mean.log.R0, tau.R0)   
    R[y] <- exp(log.R[y])
    }
    
    # biological reference points: derived quantities
    lnalpha.c <- lnalpha + (sigma.R * sigma.R)/2/(1-phi * phi)
    S.max <- 1/beta
    S.eq <- lnalpha.c * S.max
    S.msy <- S.eq * (0.5 - 0.07 * lnalpha.c)
    U.msy <- lnalpha.c * (0.5 - 0.07 * lnalpha.c)
    
    # Maturity schedule: here we use a common maturation schedule to draw the brood year specific schedules;
    prob[1] ~ dbeta(1,1)
    prob[2] ~ dbeta(1,1)
    prob[3] ~ dbeta(1,1)
    pi[1]<- prob[1]
    pi[2] <- prob[2] * (1 - pi[1])
    pi[3] <- prob[3] * (1 - pi[1] - pi[2])
    pi[4] <- 1 - pi[1] - pi[2] - pi[3]
    
    D.scale ~ dunif(.045,1)
    D.sum <- 1 / (D.scale * D.scale)
    for (a in 1:A) {
    gamma[a] <- D.sum * pi[a]
    for (y in 1:(Y+A-1)) {                                                    
    g[y,a] ~ dgamma(gamma[a],1.0)
    p[y,a] <- g[y,a]/sum(g[y,])
    }
    }
    
    # Calculate the numbers at age matrix as brood year recruits at age*proportion that matured that year
    for (t in 1:Y) {
    for(a in 1:A){
    N.ta[t,a] <- R[t+A-a] * p[t+A-a,a]
    }
    }
    
    ## OBSERVATION SUBMODEL ##
    # multinomial scale sampling
    for (t in 1:Y) {
    for (a in 1:A) {
    q[t,a] <- N.ta[t,a]/N[t]
    }
    x[t,1:A] ~ dmulti(q[t,1:A], n[t])
    }
    
    for (t in 1:Y) {
    # get observation tau's from assumed CV's
    log.sigma.C[t] <- sqrt(log((C.cv[t]^2) + 1))
    log.tau.C[t] <- 1/log.sigma.C[t]^2
    log.sigma.S[t] <- sqrt(log((S.cv[t]^2) + 1))
    log.tau.S[t] <- 1/log.sigma.S[t]^2
    
    # catch model
    U[t] ~ dunif(0.01, 0.99)
    N[t] <- sum(N.ta[t,1:A])
    S[t] <- N[t] * (1 - U[t])
    
    C[t] <- N[t] * U[t]
    log.C[t] <- log(C[t])
    C.obs[t] ~ dlnorm(log.C[t], log.tau.C[t])
    
    # escapement model
    log.S[t] <- log(S[t])
    S.obs[t] ~ dlnorm(log.S[t], log.tau.S[t])
    }
    
    }
    
    
